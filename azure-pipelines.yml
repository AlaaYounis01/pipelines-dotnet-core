# Azure DevOps Pipeline for Environment Management - BICEP ONLY
trigger: none

parameters:
- name: operation
  displayName: 'Operation Type'
  type: string
  default: 'promote'
  values:
  - promote
  - create_new
  - destroy

- name: sourceEnvironment
  displayName: 'Source Environment (for promotion)'
  type: string
  default: 'dev'
  values:
  - dev
  - staging
  - prod

- name: targetEnvironment
  displayName: 'Target Environment'
  type: string
  default: 'staging'
  values:
  - dev
  - staging
  - prod
  - feature-branch

- name: newEnvironmentName
  displayName: 'New Environment Name (for new environments)'
  type: string
  default: ''

- name: resourceGroupName
  displayName: 'Resource Group Name'
  type: string
  default: 'rg-myapp'

variables:
- group: 'environment-secrets'
- name: subscriptionServiceConnection
  value: 'azure-service-connection-v2'  # UPDATE THIS TO MATCH YOUR SERVICE CONNECTION NAME
- name: location
  value: 'East US'

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Validate
  displayName: 'Validate Parameters'
  jobs:
  - job: ValidateInputs
    displayName: 'Validate Pipeline Inputs'
    steps:
    - script: |
        echo "Operation: ${{ parameters.operation }}"
        echo "Infrastructure Method: Bicep"
        
        # Validate new environment name if creating new
        if [ "${{ parameters.operation }}" = "create_new" ] && [ -z "${{ parameters.newEnvironmentName }}" ]; then
          echo "##vso[task.logissue type=error]New environment name is required when creating a new environment"
          exit 1
        fi
        
        # Validate promotion parameters
        if [ "${{ parameters.operation }}" = "promote" ] && [ "${{ parameters.sourceEnvironment }}" = "${{ parameters.targetEnvironment }}" ]; then
          echo "##vso[task.logissue type=error]Source and target environments cannot be the same"
          exit 1
        fi
      displayName: 'Validate Parameters'

- stage: Infrastructure
  displayName: 'Infrastructure Management'
  dependsOn: Validate
  condition: succeeded()
  jobs:
  - deployment: ManageInfrastructure
    displayName: 'Manage Infrastructure with Bicep'
    environment: ${{ parameters.targetEnvironment }}
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          
          # Set environment variables
          - script: |
              # Set environment name
              if [ "${{ parameters.operation }}" = "create_new" ]; then
                ENV_NAME="${{ parameters.newEnvironmentName }}"
              else
                ENV_NAME="${{ parameters.targetEnvironment }}"
              fi
              echo "##vso[task.setvariable variable=ENV_NAME]$ENV_NAME"
              echo "##vso[task.setvariable variable=RESOURCE_GROUP_NAME]${{ parameters.resourceGroupName }}-$ENV_NAME"
            displayName: 'Set Environment Variables'
          
          # Deploy Infrastructure with Bicep
          - task: AzureCLI@2
            displayName: 'Deploy Infrastructure with Bicep'
            inputs:
              azureSubscription: $(subscriptionServiceConnection)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                if [ "${{ parameters.operation }}" = "destroy" ]; then
                  echo "Deleting resource group: $(RESOURCE_GROUP_NAME)"
                  az group delete --name $(RESOURCE_GROUP_NAME) --yes --no-wait
                  echo "✓ Resource group deletion initiated"
                else
                  echo "Deploying infrastructure to: $(RESOURCE_GROUP_NAME)"
                  
                  # Create resource group if it doesn't exist
                  echo "Creating resource group..."
                  az group create --name $(RESOURCE_GROUP_NAME) --location "$(location)"
                  
                  # Deploy Bicep template
                  echo "Deploying Bicep template..."
                  
                  # Check if bicep file exists
                  if [ ! -f "bicep/main.bicep" ]; then
                    echo "ERROR: bicep/main.bicep file not found!"
                    echo "Current directory: $(pwd)"
                    echo "Files in current directory:"
                    ls -la
                    echo "Files in bicep directory (if it exists):"
                    ls -la bicep/ 2>/dev/null || echo "bicep directory does not exist"
                    exit 1
                  fi
                  
                  # Deploy Bicep template with unique deployment name
                  DEPLOYMENT_NAME="bicep-deployment-$(date +%Y%m%d-%H%M%S)"
                  echo "Deployment name: $DEPLOYMENT_NAME"
                  
                  az deployment group create \
                    --resource-group $(RESOURCE_GROUP_NAME) \
                    --template-file bicep/main.bicep \
                    --name "$DEPLOYMENT_NAME" \
                    --parameters environmentName=$(ENV_NAME) \
                    --parameters location="$(location)" \
                    --verbose
                  
                  DEPLOYMENT_STATUS=$?
                  
                  if [ $DEPLOYMENT_STATUS -eq 0 ]; then
                    echo "✓ Bicep deployment successful"
                    
                    # Get outputs if deployment succeeded
                    echo "Getting deployment outputs..."
                    
                    # Get storage account name from outputs
                    STORAGE_NAME=$(az deployment group show \
                      --resource-group $(RESOURCE_GROUP_NAME) \
                      --name "$DEPLOYMENT_NAME" \
                      --query properties.outputs.storageAccountName.value \
                      --output tsv 2>/dev/null || echo "")
                    
                    if [ ! -z "$STORAGE_NAME" ]; then
                      echo "##vso[task.setvariable variable=STORAGE_ACCOUNT_NAME]$STORAGE_NAME"
                      echo "Storage Account Created: $STORAGE_NAME"
                    else
                      echo "No storage account name found in outputs"
                    fi
                    
                    # Get resource group name from outputs
                    RG_NAME=$(az deployment group show \
                      --resource-group $(RESOURCE_GROUP_NAME) \
                      --name "$DEPLOYMENT_NAME" \
                      --query properties.outputs.resourceGroupName.value \
                      --output tsv 2>/dev/null || echo "")
                    
                    if [ ! -z "$RG_NAME" ]; then
                      echo "Resource Group: $RG_NAME"
                    fi
                    
                  else
                    echo "✗ Bicep deployment failed with exit code: $DEPLOYMENT_STATUS"
                    exit 1
                  fi
                fi

- stage: Application
  displayName: 'Application Deployment'
  dependsOn: Infrastructure
  condition: and(succeeded(), ne('${{ parameters.operation }}', 'destroy'))
  jobs:
  - deployment: DeployApplication
    displayName: 'Deploy Application'
    environment: ${{ parameters.targetEnvironment }}
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          
          # Set environment variables again
          - script: |
              if [ "${{ parameters.operation }}" = "create_new" ]; then
                ENV_NAME="${{ parameters.newEnvironmentName }}"
              else
                ENV_NAME="${{ parameters.targetEnvironment }}"
              fi
              echo "##vso[task.setvariable variable=ENV_NAME]$ENV_NAME"
              echo "##vso[task.setvariable variable=RESOURCE_GROUP_NAME]${{ parameters.resourceGroupName }}-$ENV_NAME"
            displayName: 'Set Environment Variables'
          
          # Download artifacts based on operation type (OPTIONAL - only if you have build artifacts)
          - ${{ if eq(parameters.operation, 'promote') }}:
            - script: |
                echo "Promoting from ${{ parameters.sourceEnvironment }} to ${{ parameters.targetEnvironment }}"
                echo "Note: Artifact download step disabled - no build pipeline configured"
                echo "To enable artifact downloads, update the pipeline name in the YAML"
              displayName: 'Promotion Info (Artifacts Disabled)'
            
            # Uncomment and update this section when you have a build pipeline:
            # - task: DownloadBuildArtifacts@0
            #   displayName: 'Download Source Environment Artifacts'
            #   inputs:
            #     buildType: 'specific'
            #     project: '$(System.TeamProject)'
            #     pipeline: 'YOUR-ACTUAL-BUILD-PIPELINE-NAME'  # UPDATE THIS
            #     buildVersionToDownload: 'latestFromBranch'
            #     branchName: 'refs/heads/main'
            #     downloadType: 'specific'
            #     downloadPath: '$(System.ArtifactsDirectory)'
          
          - ${{ if eq(parameters.operation, 'create_new') }}:
            - script: |
                echo "Creating new environment: ${{ parameters.newEnvironmentName }}"
                echo "Note: Artifact download step disabled - no build pipeline configured"
                echo "To enable artifact downloads, update the pipeline name in the YAML"
              displayName: 'New Environment Info (Artifacts Disabled)'
            
            # Uncomment and update this section when you have a build pipeline:
            # - task: DownloadBuildArtifacts@0
            #   displayName: 'Download Latest Artifacts'
            #   inputs:
            #     buildType: 'current'
            #     downloadType: 'specific'
            #     downloadPath: '$(System.ArtifactsDirectory)'
          
          # Deploy application
          - task: AzureCLI@2
            displayName: 'Deploy Application'
            inputs:
              azureSubscription: $(subscriptionServiceConnection)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Application deployment for environment: $(ENV_NAME)"
                echo "Resource Group: $(RESOURCE_GROUP_NAME)"
                
                # Since your current Bicep template only creates a storage account,
                # this is a placeholder for future application deployment
                echo "Storage Account: $(STORAGE_ACCOUNT_NAME)"
                
                # Example deployment steps (uncomment when you have actual app artifacts):
                
                # For ZIP deployment to App Service:
                # if [ -f "$(System.ArtifactsDirectory)/drop/app.zip" ]; then
                #   echo "Deploying ZIP package to App Service"
                #   az webapp deployment source config-zip \
                #     --resource-group $(RESOURCE_GROUP_NAME) \
                #     --name "myapp-$(ENV_NAME)" \
                #     --src "$(System.ArtifactsDirectory)/drop/app.zip"
                # else
                #   echo "No ZIP artifact found for deployment"
                # fi
                
                # For container deployment:
                # az webapp config container set \
                #   --name "myapp-$(ENV_NAME)" \
                #   --resource-group $(RESOURCE_GROUP_NAME) \
                #   --docker-custom-image-name "myregistry.azurecr.io/myapp:latest"
                
                # Configure app settings (if you had a web app):
                # az webapp config appsettings set \
                #   --resource-group $(RESOURCE_GROUP_NAME) \
                #   --name "myapp-$(ENV_NAME)" \
                #   --settings \
                #     ENVIRONMENT=$(ENV_NAME) \
                #     STORAGE_ACCOUNT="$(STORAGE_ACCOUNT_NAME)"
                
                echo "✓ Application deployment completed"

- stage: Testing
  displayName: 'Post-Deployment Testing'
  dependsOn: Application
  condition: and(succeeded(), ne('${{ parameters.operation }}', 'destroy'))
  jobs:
  - job: RunTests
    displayName: 'Run Health Checks and Tests'
    steps:
    - script: |
        # Set environment name
        if [ "${{ parameters.operation }}" = "create_new" ]; then
          ENV_NAME="${{ parameters.newEnvironmentName }}"
        else
          ENV_NAME="${{ parameters.targetEnvironment }}"
        fi
        
        echo "Running tests for environment: $ENV_NAME"
        echo "Resource Group: ${{ parameters.resourceGroupName }}-$ENV_NAME"
        
        # Basic infrastructure validation
        echo "Validating deployed infrastructure..."
        
        # Check if resource group exists
        if az group show --name "${{ parameters.resourceGroupName }}-$ENV_NAME" --output none 2>/dev/null; then
          echo "✓ Resource group exists"
        else
          echo "✗ Resource group not found"
          exit 1
        fi
        
        # List resources in the group
        echo "Resources in group:"
        az resource list --resource-group "${{ parameters.resourceGroupName }}-$ENV_NAME" --output table
        
        # Environment-specific tests
        if [ "$ENV_NAME" = "staging" ] || [ "$ENV_NAME" = "prod" ]; then
          echo "Running comprehensive tests for $ENV_NAME environment"
          # Add your environment-specific test commands here
        fi
        
        echo "✓ All tests completed successfully"
      displayName: 'Health Check and Testing'

- stage: Notification
  displayName: 'Send Notifications'
  dependsOn: [Infrastructure, Application, Testing]
  condition: always()
  jobs:
  - job: SendNotification
    displayName: 'Send Deployment Notification'
    steps:
    - script: |
        ENV_NAME="${{ parameters.targetEnvironment }}"
        if [ "${{ parameters.operation }}" = "create_new" ]; then
          ENV_NAME="${{ parameters.newEnvironmentName }}"
        fi
        
        STATUS="✓ Success"
        if [ "$(Agent.JobStatus)" != "Succeeded" ]; then
          STATUS="✗ Failed"
        fi
        
        echo "=== Bicep Deployment Summary ==="
        echo "Status: $STATUS"
        echo "Environment: $ENV_NAME"
        echo "Operation: ${{ parameters.operation }}"
        echo "Infrastructure Method: Bicep"
        echo "Resource Group: ${{ parameters.resourceGroupName }}-$ENV_NAME"
        echo "==============================="
        
      displayName: 'Send Notification'