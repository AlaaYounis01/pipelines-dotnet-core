trigger: none

parameters:
- name: operation
  displayName: 'Operation Type'
  type: string
  default: 'promote'
  values:
  - promote
  - create_new
  - destroy

- name: sourceEnvironment
  displayName: 'Source Environment (for promotion)'
  type: string
  default: 'dev'
  values:
  - dev
  - uat
  - staging
  - prod

- name: targetEnvironment
  displayName: 'Target Environment'
  type: string
  default: 'staging'
  values:
  - dev
  - uat
  - staging
  - prod
  - feature-branch

- name: newEnvironmentName
  displayName: 'New Environment Name (for new environments)'
  type: string
  default: ''

- name: resourceGroupName
  displayName: 'Resource Group Name'
  type: string
  default: 'rg-myapp'

- name: infrastructureMethod
  displayName: 'Infrastructure Method'
  type: string
  default: 'bicep'
  values:
  - bicep
  - azure_cli
  - arm_template

- name: vmSize
  displayName: 'VM Size'
  type: string
  default: 'Standard_B2s'
  values:
  - Standard_B1s
  - Standard_B2s
  - Standard_B4ms
  - Standard_D2s_v3
  - Standard_D4s_v3

- name: vmCount
  displayName: 'Number of VMs'
  type: number
  default: 3
  values:
  - 1
  - 2
  - 3
  - 4
  - 5

- name: appGatewayTier
  displayName: 'Application Gateway Tier'
  type: string
  default: 'Standard_v2'
  values:
  - Standard_v2
  - WAF_v2

variables:
- group: 'environment-secrets'
- name: subscriptionServiceConnection
  value: 'azure-service-connection-v2'
- name: location
  value: 'East US'
- name: vmAdminUsername
  value: 'azureuser'

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Validate
  displayName: 'Validate Parameters'
  jobs:
  - job: ValidateInputs
    displayName: 'Validate Pipeline Inputs'
    steps:
    - script: |
        echo "Operation: ${{ parameters.operation }}"
        echo "Infrastructure Method: ${{ parameters.infrastructureMethod }}"
        echo "VM Size: ${{ parameters.vmSize }}"
        echo "VM Count: ${{ parameters.vmCount }}"
        echo "App Gateway Tier: ${{ parameters.appGatewayTier }}"
        
        # Validate new environment name if creating new
        if [ "${{ parameters.operation }}" = "create_new" ] && [ -z "${{ parameters.newEnvironmentName }}" ]; then
          echo "##vso[task.logissue type=error]New environment name is required when creating a new environment"
          exit 1
        fi
        
        # Validate promotion parameters
        if [ "${{ parameters.operation }}" = "promote" ] && [ "${{ parameters.sourceEnvironment }}" = "${{ parameters.targetEnvironment }}" ]; then
          echo "##vso[task.logissue type=error]Source and target environments cannot be the same"
          exit 1
        fi
        
        # Validate VM count
        if [ ${{ parameters.vmCount }} -lt 1 ] || [ ${{ parameters.vmCount }} -gt 5 ]; then
          echo "##vso[task.logissue type=error]VM count must be between 1 and 5"
          exit 1
        fi
      displayName: 'Validate Parameters'

- stage: Infrastructure
  displayName: 'Infrastructure Management'
  dependsOn: Validate
  condition: succeeded()
  jobs:
  - deployment: ManageInfrastructure
    displayName: 'Manage Infrastructure'
    environment: ${{ parameters.targetEnvironment }}
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          
          # Set environment variables
          - script: |
              # Set environment name
              if [ "${{ parameters.operation }}" = "create_new" ]; then
                ENV_NAME="${{ parameters.newEnvironmentName }}"
              else
                ENV_NAME="${{ parameters.targetEnvironment }}"
              fi
              echo "##vso[task.setvariable variable=ENV_NAME]$ENV_NAME"
              echo "##vso[task.setvariable variable=RESOURCE_GROUP_NAME]${{ parameters.resourceGroupName }}-$ENV_NAME"
              
              # Generate secure VM password
              VM_PASSWORD="$(openssl rand -base64 32 | tr -d /=+ | cut -c -16)Aa1!"
              echo "##vso[task.setvariable variable=VM_PASSWORD;isSecret=true]$VM_PASSWORD"
              echo "VM password generated securely"
            displayName: 'Set Environment Variables'
          
          # Option 1: Using Bicep with VMs and Load Balancer
          - ${{ if eq(parameters.infrastructureMethod, 'bicep') }}:
            - task: AzureCLI@2
              displayName: 'Deploy Infrastructure with Bicep'
              inputs:
                azureSubscription: $(subscriptionServiceConnection)
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  if [ "${{ parameters.operation }}" = "destroy" ]; then
                    echo "Deleting resource group: $(RESOURCE_GROUP_NAME)"
                    az group delete --name $(RESOURCE_GROUP_NAME) --yes --no-wait
                    echo "✓ Resource group deletion initiated"
                  else
                    echo "Deploying infrastructure to: $(RESOURCE_GROUP_NAME)"
                    
                    # Create resource group if it doesn't exist
                    echo "Creating resource group..."
                    az group create --name $(RESOURCE_GROUP_NAME) --location "$(location)"
                    
                    # Deploy Bicep template
                    echo "Deploying Bicep template with Load Balancer and VMs..."
                    
                    # Check if bicep file exists
                    if [ ! -f "bicep/main.bicep" ]; then
                      echo "ERROR: bicep/main.bicep file not found!"
                      echo "Current directory: $(pwd)"
                      echo "Files in current directory:"
                      ls -la
                      echo "Files in bicep directory (if it exists):"
                      ls -la bicep/ 2>/dev/null || echo "bicep directory does not exist"
                      exit 1
                    fi
                    
                    # Deploy infrastructure with VM parameters
                    az deployment group create \
                      --resource-group $(RESOURCE_GROUP_NAME) \
                      --template-file bicep/main.bicep \
                      --parameters environmentName=$(ENV_NAME) \
                      --parameters location="$(location)" \
                      --parameters vmAdminUsername=$(vmAdminUsername) \
                      --parameters vmAdminPassword="$(VM_PASSWORD)" \
                      --parameters vmSize="${{ parameters.vmSize }}" \
                      --parameters vmCount=${{ parameters.vmCount }} \
                      --parameters appGatewayTier="${{ parameters.appGatewayTier }}" \
                      --parameters appGatewaySkuName="${{ parameters.appGatewayTier }}" \
                      --verbose
                    
                    DEPLOYMENT_STATUS=$?
                    
                    if [ $DEPLOYMENT_STATUS -eq 0 ]; then
                      echo "✓ Bicep deployment successful"
                      
                      # Get deployment outputs
                      echo "Getting deployment outputs..."
                      
                      # Application Gateway outputs
                      AGW_FQDN=$(az deployment group show \
                        --resource-group $(RESOURCE_GROUP_NAME) \
                        --name main \
                        --query properties.outputs.applicationGatewayFQDN.value -o tsv 2>/dev/null || echo "")
                      
                      AGW_IP=$(az deployment group show \
                        --resource-group $(RESOURCE_GROUP_NAME) \
                        --name main \
                        --query properties.outputs.applicationGatewayPublicIP.value -o tsv 2>/dev/null || echo "")
                      
                      # Load Balancer outputs
                      LB_FQDN=$(az deployment group show \
                        --resource-group $(RESOURCE_GROUP_NAME) \
                        --name main \
                        --query properties.outputs.loadBalancerFQDN.value -o tsv 2>/dev/null || echo "")
                      
                      LB_IP=$(az deployment group show \
                        --resource-group $(RESOURCE_GROUP_NAME) \
                        --name main \
                        --query properties.outputs.loadBalancerPublicIP.value -o tsv 2>/dev/null || echo "")
                      
                      # VM names
                      VM_NAMES=$(az deployment group show \
                        --resource-group $(RESOURCE_GROUP_NAME) \
                        --name main \
                        --query properties.outputs.vmNames.value -o json 2>/dev/null || echo "[]")
                      
                      # Storage account info
                      STORAGE_NAME=$(az deployment group show \
                        --resource-group $(RESOURCE_GROUP_NAME) \
                        --name main \
                        --query properties.outputs.storageAccountName.value -o tsv 2>/dev/null || echo "")
                      
                      # Set variables for later stages
                      if [ ! -z "$AGW_FQDN" ]; then
                        echo "##vso[task.setvariable variable=APP_GATEWAY_URL;isOutput=true]http://$AGW_FQDN"
                        echo "##vso[task.setvariable variable=APP_GATEWAY_FQDN;isOutput=true]$AGW_FQDN"
                      fi
                      
                      if [ ! -z "$LB_FQDN" ]; then
                        echo "##vso[task.setvariable variable=LOAD_BALANCER_URL;isOutput=true]http://$LB_FQDN"
                        echo "##vso[task.setvariable variable=LOAD_BALANCER_FQDN;isOutput=true]$LB_FQDN"
                      fi
                      
                      echo "##vso[task.setvariable variable=VM_NAMES;isOutput=true]$VM_NAMES"
                      echo "##vso[task.setvariable variable=STORAGE_ACCOUNT_NAME;isOutput=true]$STORAGE_NAME"
                      
                      # Display deployment summary
                      echo ""
                      echo "=== Infrastructure Deployment Summary ==="
                      echo "Environment: $(ENV_NAME)"
                      echo "Resource Group: $(RESOURCE_GROUP_NAME)"
                      echo "VM Count: ${{ parameters.vmCount }}"
                      echo "VM Size: ${{ parameters.vmSize }}"
                      echo ""
                      echo "URLs:"
                      [ ! -z "$AGW_FQDN" ] && echo "  Application Gateway: http://$AGW_FQDN"
                      [ ! -z "$LB_FQDN" ] && echo "  Load Balancer: http://$LB_FQDN"
                      echo ""
                      echo "SSH Access (via Load Balancer):"
                      for i in $(seq 0 $((${parameters.vmCount} - 1))); do
                        PORT=$((2200 + i))
                        echo "  VM$i: ssh $(vmAdminUsername)@$LB_FQDN -p $PORT"
                      done
                      echo ""
                      echo "Storage Account: $STORAGE_NAME"
                      echo "======================================="
                      
                    else
                      echo "✗ Bicep deployment failed with exit code: $DEPLOYMENT_STATUS"
                      exit 1
                    fi
                  fi
          
          # Option 2: Using Azure CLI directly (updated for VMs and LB)
          - ${{ if eq(parameters.infrastructureMethod, 'azure_cli') }}:
            - task: AzureCLI@2
              displayName: 'Deploy Infrastructure with Azure CLI'
              inputs:
                azureSubscription: $(subscriptionServiceConnection)
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  if [ "${{ parameters.operation }}" = "destroy" ]; then
                    echo "Deleting resource group: $(RESOURCE_GROUP_NAME)"
                    az group delete --name $(RESOURCE_GROUP_NAME) --yes --no-wait
                  else
                    echo "Creating infrastructure with Azure CLI"
                    
                    # Create resource group
                    az group create --name $(RESOURCE_GROUP_NAME) --location "$(location)"
                    
                    # Create VNet
                    az network vnet create \
                      --name "vnet-$(ENV_NAME)" \
                      --resource-group $(RESOURCE_GROUP_NAME) \
                      --address-prefix 10.0.0.0/16 \
                      --subnet-name backend-subnet \
                      --subnet-prefix 10.0.2.0/24
                    
                    # Create Load Balancer
                    az network public-ip create \
                      --name "pip-lb-$(ENV_NAME)" \
                      --resource-group $(RESOURCE_GROUP_NAME) \
                      --sku Standard
                    
                    az network lb create \
                      --name "lb-$(ENV_NAME)" \
                      --resource-group $(RESOURCE_GROUP_NAME) \
                      --frontend-ip-name LoadBalancerFrontEnd \
                      --public-ip-address "pip-lb-$(ENV_NAME)" \
                      --backend-pool-name BackendPool \
                      --sku Standard
                    
                    # Create availability set
                    az vm availability-set create \
                      --name "avset-$(ENV_NAME)" \
                      --resource-group $(RESOURCE_GROUP_NAME) \
                      --platform-fault-domain-count 2 \
                      --platform-update-domain-count 3
                    
                    # Create VMs
                    for i in $(seq 0 $((${parameters.vmCount} - 1))); do
                      az vm create \
                        --name "vm$i-$(ENV_NAME)" \
                        --resource-group $(RESOURCE_GROUP_NAME) \
                        --availability-set "avset-$(ENV_NAME)" \
                        --image UbuntuLTS \
                        --size "${{ parameters.vmSize }}" \
                        --admin-username $(vmAdminUsername) \
                        --admin-password "$(VM_PASSWORD)" \
                        --vnet-name "vnet-$(ENV_NAME)" \
                        --subnet backend-subnet \
                        --nsg "" \
                        --public-ip "" \
                        --custom-data cloud-init.txt
                    done
                    
                    echo "✓ Infrastructure created with Azure CLI"
                  fi
          
          # Option 3: Using ARM Template (placeholder - would need ARM template updates)
          - ${{ if eq(parameters.infrastructureMethod, 'arm_template') }}:
            - task: AzureResourceManagerTemplateDeployment@3
              displayName: 'Deploy ARM Template'
              condition: ne('${{ parameters.operation }}', 'destroy')
              inputs:
                deploymentScope: 'Resource Group'
                azureResourceManagerConnection: $(subscriptionServiceConnection)
                action: 'Create Or Update Resource Group'
                resourceGroupName: $(RESOURCE_GROUP_NAME)
                location: $(location)
                templateLocation: 'Linked artifact'
                codeArtifactLocation: 'arm-templates/azuredeploy.json'
                parametersLocation: 'Linked artifact'
                codeParametersLocation: 'arm-templates/azuredeploy.parameters.json'
                overrideParameters: |
                  -environmentName $(ENV_NAME)
                  -vmAdminUsername $(vmAdminUsername)
                  -vmAdminPassword $(VM_PASSWORD)
                  -vmSize ${{ parameters.vmSize }}
                  -vmCount ${{ parameters.vmCount }}
                deploymentMode: 'Incremental'
            
            - task: AzureCLI@2
              displayName: 'Delete Resources (ARM)'
              condition: eq('${{ parameters.operation }}', 'destroy')
              inputs:
                azureSubscription: $(subscriptionServiceConnection)
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  az group delete --name $(RESOURCE_GROUP_NAME) --yes --no-wait

- stage: ApplicationConfiguration
  displayName: 'Configure Applications on VMs'
  dependsOn: Infrastructure
  condition: and(succeeded(), ne('${{ parameters.operation }}', 'destroy'))
  jobs:
  - deployment: ConfigureVMs
    displayName: 'Configure VM Applications'
    environment: ${{ parameters.targetEnvironment }}
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          
          # Set environment variables again
          - script: |
              if [ "${{ parameters.operation }}" = "create_new" ]; then
                ENV_NAME="${{ parameters.newEnvironmentName }}"
              else
                ENV_NAME="${{ parameters.targetEnvironment }}"
              fi
              echo "##vso[task.setvariable variable=ENV_NAME]$ENV_NAME"
              echo "##vso[task.setvariable variable=RESOURCE_GROUP_NAME]${{ parameters.resourceGroupName }}-$ENV_NAME"
            displayName: 'Set Environment Variables'
          
          # Configure applications on VMs
          - task: AzureCLI@2
            displayName: 'Configure VM Applications'
            inputs:
              azureSubscription: $(subscriptionServiceConnection)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Configuring applications on VMs..."
                
                # Get VM information
                VMS=$(az vm list --resource-group $(RESOURCE_GROUP_NAME) --query "[?contains(name, 'vm')].name" -o tsv)
                
                for vm in $VMS; do
                  echo "Configuring VM: $vm"
                  
                  # Run custom configuration script on VM
                  az vm run-command invoke \
                    --resource-group $(RESOURCE_GROUP_NAME) \
                    --name $vm \
                    --command-id RunShellScript \
                    --scripts "
                      # Update system packages
                      sudo apt-get update
                      
                      # Install additional packages if needed
                      sudo apt-get install -y htop curl wget
                      
                      # Configure nginx with environment-specific content
                      sudo sed -i 's/\${ENVIRONMENT}/$(ENV_NAME)/g' /var/www/html/index.html
                      sudo sed -i 's/\${VM_NUMBER}/$vm/g' /var/www/html/index.html
                      
                      # Restart nginx to apply changes
                      sudo systemctl restart nginx
                      
                      # Verify nginx is running
                      sudo systemctl status nginx --no-pager
                      
                      echo 'VM configuration completed for $vm'
                    "
                done
                
                echo "✓ All VMs configured successfully"

- stage: Testing
  displayName: 'Post-Deployment Testing'
  dependsOn: [Infrastructure, ApplicationConfiguration]
  condition: and(succeeded(), ne('${{ parameters.operation }}', 'destroy'))
  jobs:
  - job: RunTests
    displayName: 'Run Health Checks and Tests'
    variables:
      APP_GATEWAY_URL: $[ stageDependencies.Infrastructure.ManageInfrastructure.outputs['ManageInfrastructure.APP_GATEWAY_URL'] ]
      LOAD_BALANCER_URL: $[ stageDependencies.Infrastructure.ManageInfrastructure.outputs['ManageInfrastructure.LOAD_BALANCER_URL'] ]
      APP_GATEWAY_FQDN: $[ stageDependencies.Infrastructure.ManageInfrastructure.outputs['ManageInfrastructure.APP_GATEWAY_FQDN'] ]
      LOAD_BALANCER_FQDN: $[ stageDependencies.Infrastructure.ManageInfrastructure.outputs['ManageInfrastructure.LOAD_BALANCER_FQDN'] ]
    steps:
    - script: |
        # Set environment name
        if [ "${{ parameters.operation }}" = "create_new" ]; then
          ENV_NAME="${{ parameters.newEnvironmentName }}"
        else
          ENV_NAME="${{ parameters.targetEnvironment }}"
        fi
        
        echo "Testing infrastructure for environment: $ENV_NAME"
        echo "Application Gateway URL: $(APP_GATEWAY_URL)"
        echo "Load Balancer URL: $(LOAD_BALANCER_URL)"
        
        # Wait for VMs to be ready
        echo "Waiting for VMs to be ready..."
        sleep 60
        
        # Test Application Gateway
        if [ ! -z "$(APP_GATEWAY_URL)" ]; then
          echo "Testing Application Gateway..."
          for i in {1..5}; do
            response=$(curl -s -o /dev/null -w "%{http_code}" $(APP_GATEWAY_URL) || echo "000")
            if [ $response -eq 200 ]; then
              echo "✓ Application Gateway health check passed (attempt $i)"
              break
            else
              echo "⚠ Application Gateway health check failed with status: $response (attempt $i)"
              if [ $i -eq 5 ]; then
                echo "✗ Application Gateway health check failed after 5 attempts"
              else
                sleep 30
              fi
            fi
          done
        fi
        
        # Test Load Balancer
        if [ ! -z "$(LOAD_BALANCER_URL)" ]; then
          echo "Testing Load Balancer..."
          for i in {1..5}; do
            response=$(curl -s -o /dev/null -w "%{http_code}" $(LOAD_BALANCER_URL) || echo "000")
            if [ $response -eq 200 ]; then
              echo "✓ Load Balancer health check passed (attempt $i)"
              break
            else
              echo "⚠ Load Balancer health check failed with status: $response (attempt $i)"
              if [ $i -eq 5 ]; then
                echo "✗ Load Balancer health check failed after 5 attempts"
              else
                sleep 30
              fi
            fi
          done
        fi
        
        # Test individual VM responses through Load Balancer
        echo "Testing load balancer distribution..."
        if [ ! -z "$(LOAD_BALANCER_URL)" ]; then
          for i in {1..10}; do
            curl -s $(LOAD_BALANCER_URL) | grep -o "VM [0-9]" || echo "No VM identifier found"
          done
        fi
        
        # Environment-specific tests
        if [ "$ENV_NAME" = "staging" ] || [ "$ENV_NAME" = "prod" ]; then
          echo "Running comprehensive tests for $ENV_NAME environment"
          # Add performance tests, security scans, etc.
        fi
      displayName: 'Infrastructure Health Check and Testing'

- stage: Notification
  displayName: 'Send Notifications'
  dependsOn: [Infrastructure, ApplicationConfiguration, Testing]
  condition: always()
  jobs:
  - job: SendNotification
    displayName: 'Send Deployment Notification'
    variables:
      APP_GATEWAY_URL: $[ stageDependencies.Infrastructure.ManageInfrastructure.outputs['ManageInfrastructure.APP_GATEWAY_URL'] ]
      LOAD_BALANCER_URL: $[ stageDependencies.Infrastructure.ManageInfrastructure.outputs['ManageInfrastructure.LOAD_BALANCER_URL'] ]
      APP_GATEWAY_FQDN: $[ stageDependencies.Infrastructure.ManageInfrastructure.outputs['ManageInfrastructure.APP_GATEWAY_FQDN'] ]
      LOAD_BALANCER_FQDN: $[ stageDependencies.Infrastructure.ManageInfrastructure.outputs['ManageInfrastructure.LOAD_BALANCER_FQDN'] ]
      VM_NAMES: $[ stageDependencies.Infrastructure.ManageInfrastructure.outputs['ManageInfrastructure.VM_NAMES'] ]
    steps:
    - script: |
        ENV_NAME="${{ parameters.targetEnvironment }}"
        if [ "${{ parameters.operation }}" = "create_new" ]; then
          ENV_NAME="${{ parameters.newEnvironmentName }}"
        fi
        
        STATUS="✓ Success"
        if [ "$(Agent.JobStatus)" != "Succeeded" ]; then
          STATUS="✗ Failed"
        fi
        
        echo "================================================="
        echo "           DEPLOYMENT SUMMARY"
        echo "================================================="
        echo "Status: $STATUS"
        echo "Environment: $ENV_NAME"
        echo "Operation: ${{ parameters.operation }}"
        echo "Infrastructure Method: ${{ parameters.infrastructureMethod }}"
        echo "VM Count: ${{ parameters.vmCount }}"
        echo "VM Size: ${{ parameters.vmSize }}"
        echo "App Gateway Tier: ${{ parameters.appGatewayTier }}"
        echo ""
        echo "URLs:"
        [ ! -z "$(APP_GATEWAY_URL)" ] && echo "  🌐 Application Gateway: $(APP_GATEWAY_URL)"
        [ ! -z "$(LOAD_BALANCER_URL)" ] && echo "  ⚖️  Load Balancer: $(LOAD_BALANCER_URL)"
        echo ""
        echo "SSH Access:"
        if [ ! -z "$(LOAD_BALANCER_FQDN)" ]; then
          for i in $(seq 0 $((${parameters.vmCount} - 1))); do
            PORT=$((2200 + i))
            echo "  🖥️  VM$i: ssh $(vmAdminUsername)@$(LOAD_BALANCER_FQDN) -p $PORT"
          done
        fi
        echo ""
        echo "Next Steps:"
        echo "  1. Verify applications are running correctly"
        echo "  2. Run additional tests if needed"
        echo "  3. Update DNS records if required"
        echo "  4. Monitor resource utilization"
        echo "================================================="
        
        # Here you could add Teams/Slack/Email notifications
        # Example for Teams webhook:
        # curl -H "Content-Type: application/json" -d '{"text":"Deployment $STATUS for $ENV_NAME"}' $TEAMS_WEBHOOK
        
      displayName: 'Display Deployment Summary'